// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace fbs.pilot
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Bubble : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Bubble GetRootAsBubble(ByteBuffer _bb) { return GetRootAsBubble(_bb, new Bubble()); }
  public static Bubble GetRootAsBubble(ByteBuffer _bb, Bubble obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Bubble __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Uid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public fbs.pilot.Vec2? PosCur { get { int o = __p.__offset(6); return o != 0 ? (fbs.pilot.Vec2?)(new fbs.pilot.Vec2()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public fbs.pilot.Vec2? PosTarget { get { int o = __p.__offset(8); return o != 0 ? (fbs.pilot.Vec2?)(new fbs.pilot.Vec2()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float Speed { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public fbs.pilot.BubbleType Type { get { int o = __p.__offset(12); return o != 0 ? (fbs.pilot.BubbleType)__p.bb.GetSbyte(o + __p.bb_pos) : fbs.pilot.BubbleType.normal; } }

  public static void StartBubble(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddUid(FlatBufferBuilder builder, int uid) { builder.AddInt(0, uid, 0); }
  public static void AddPosCur(FlatBufferBuilder builder, Offset<fbs.pilot.Vec2> posCurOffset) { builder.AddStruct(1, posCurOffset.Value, 0); }
  public static void AddPosTarget(FlatBufferBuilder builder, Offset<fbs.pilot.Vec2> posTargetOffset) { builder.AddStruct(2, posTargetOffset.Value, 0); }
  public static void AddSpeed(FlatBufferBuilder builder, float speed) { builder.AddFloat(3, speed, 0.0f); }
  public static void AddType(FlatBufferBuilder builder, fbs.pilot.BubbleType type) { builder.AddSbyte(4, (sbyte)type, 0); }
  public static Offset<fbs.pilot.Bubble> EndBubble(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<fbs.pilot.Bubble>(o);
  }
};


}
