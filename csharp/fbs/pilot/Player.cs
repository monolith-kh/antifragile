// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace fbs.pilot
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Player : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Player GetRootAsPlayer(ByteBuffer _bb) { return GetRootAsPlayer(_bb, new Player()); }
  public static Player GetRootAsPlayer(ByteBuffer _bb, Player obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Player __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Uid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Username { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUsernameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetUsernameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetUsernameArray() { return __p.__vector_as_array<byte>(6); }
  public string ImageUrl { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImageUrlBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetImageUrlBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetImageUrlArray() { return __p.__vector_as_array<byte>(8); }
  public int Score { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public fbs.pilot.PlayerStatus Status { get { int o = __p.__offset(12); return o != 0 ? (fbs.pilot.PlayerStatus)__p.bb.GetSbyte(o + __p.bb_pos) : fbs.pilot.PlayerStatus.idle; } }

  public static Offset<fbs.pilot.Player> CreatePlayer(FlatBufferBuilder builder,
      int uid = 0,
      StringOffset usernameOffset = default(StringOffset),
      StringOffset image_urlOffset = default(StringOffset),
      int score = 0,
      fbs.pilot.PlayerStatus status = fbs.pilot.PlayerStatus.idle) {
    builder.StartTable(5);
    Player.AddScore(builder, score);
    Player.AddImageUrl(builder, image_urlOffset);
    Player.AddUsername(builder, usernameOffset);
    Player.AddUid(builder, uid);
    Player.AddStatus(builder, status);
    return Player.EndPlayer(builder);
  }

  public static void StartPlayer(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddUid(FlatBufferBuilder builder, int uid) { builder.AddInt(0, uid, 0); }
  public static void AddUsername(FlatBufferBuilder builder, StringOffset usernameOffset) { builder.AddOffset(1, usernameOffset.Value, 0); }
  public static void AddImageUrl(FlatBufferBuilder builder, StringOffset imageUrlOffset) { builder.AddOffset(2, imageUrlOffset.Value, 0); }
  public static void AddScore(FlatBufferBuilder builder, int score) { builder.AddInt(3, score, 0); }
  public static void AddStatus(FlatBufferBuilder builder, fbs.pilot.PlayerStatus status) { builder.AddSbyte(4, (sbyte)status, 0); }
  public static Offset<fbs.pilot.Player> EndPlayer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<fbs.pilot.Player>(o);
  }
};


}
