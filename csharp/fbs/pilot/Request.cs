// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace fbs.pilot
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Request : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Request GetRootAsRequest(ByteBuffer _bb) { return GetRootAsRequest(_bb, new Request()); }
  public static Request GetRootAsRequest(ByteBuffer _bb, Request obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Request __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Timestamp { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public fbs.pilot.Command Command { get { int o = __p.__offset(6); return o != 0 ? (fbs.pilot.Command)__p.bb.GetSbyte(o + __p.bb_pos) : fbs.pilot.Command.welcome; } }
  public fbs.pilot.Sender Sender { get { int o = __p.__offset(8); return o != 0 ? (fbs.pilot.Sender)__p.bb.GetSbyte(o + __p.bb_pos) : fbs.pilot.Sender.server; } }
  public fbs.pilot.Data DataType { get { int o = __p.__offset(10); return o != 0 ? (fbs.pilot.Data)__p.bb.Get(o + __p.bb_pos) : fbs.pilot.Data.NONE; } }
  public TTable? Data<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(12); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<fbs.pilot.Request> CreateRequest(FlatBufferBuilder builder,
      long timestamp = 0,
      fbs.pilot.Command command = fbs.pilot.Command.welcome,
      fbs.pilot.Sender sender = fbs.pilot.Sender.server,
      fbs.pilot.Data data_type = fbs.pilot.Data.NONE,
      int dataOffset = 0) {
    builder.StartTable(5);
    Request.AddTimestamp(builder, timestamp);
    Request.AddData(builder, dataOffset);
    Request.AddDataType(builder, data_type);
    Request.AddSender(builder, sender);
    Request.AddCommand(builder, command);
    return Request.EndRequest(builder);
  }

  public static void StartRequest(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTimestamp(FlatBufferBuilder builder, long timestamp) { builder.AddLong(0, timestamp, 0); }
  public static void AddCommand(FlatBufferBuilder builder, fbs.pilot.Command command) { builder.AddSbyte(1, (sbyte)command, 0); }
  public static void AddSender(FlatBufferBuilder builder, fbs.pilot.Sender sender) { builder.AddSbyte(2, (sbyte)sender, 0); }
  public static void AddDataType(FlatBufferBuilder builder, fbs.pilot.Data dataType) { builder.AddByte(3, (byte)dataType, 0); }
  public static void AddData(FlatBufferBuilder builder, int dataOffset) { builder.AddOffset(4, dataOffset, 0); }
  public static Offset<fbs.pilot.Request> EndRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<fbs.pilot.Request>(o);
  }
};


}
