# automatically generated by the FlatBuffers compiler, do not modify

# namespace: pilot

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Joycon(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Joycon()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsJoycon(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Joycon
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Joycon
    def RightY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def RightX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def RightA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def RightB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def RightR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def RightZr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def RightHorizontal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def RightVertical(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def RightAccelX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def RightAccelY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def RightAccelZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def RightGyroX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Joycon
    def RightGyroY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Joycon
    def RightGyroZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Joycon
    def RightBatteryCharging(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def RightBatteryLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def RightHome(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def LeftDown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def LeftUp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def LeftRight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def LeftLeft(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def LeftL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def LeftZl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def LeftHorizontal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def LeftVertical(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def LeftAccelX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def LeftAccelY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def LeftAccelZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def LeftGyroX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Joycon
    def LeftGyroY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Joycon
    def LeftGyroZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Joycon
    def LeftBatteryCharging(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joycon
    def LeftBatteryLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def JoyconStart(builder): builder.StartObject(33)
def Start(builder):
    return JoyconStart(builder)
def JoyconAddRightY(builder, rightY): builder.PrependInt32Slot(0, rightY, 0)
def AddRightY(builder, rightY):
    return JoyconAddRightY(builder, rightY)
def JoyconAddRightX(builder, rightX): builder.PrependInt32Slot(1, rightX, 0)
def AddRightX(builder, rightX):
    return JoyconAddRightX(builder, rightX)
def JoyconAddRightA(builder, rightA): builder.PrependInt32Slot(2, rightA, 0)
def AddRightA(builder, rightA):
    return JoyconAddRightA(builder, rightA)
def JoyconAddRightB(builder, rightB): builder.PrependInt32Slot(3, rightB, 0)
def AddRightB(builder, rightB):
    return JoyconAddRightB(builder, rightB)
def JoyconAddRightR(builder, rightR): builder.PrependInt32Slot(4, rightR, 0)
def AddRightR(builder, rightR):
    return JoyconAddRightR(builder, rightR)
def JoyconAddRightZr(builder, rightZr): builder.PrependInt32Slot(5, rightZr, 0)
def AddRightZr(builder, rightZr):
    return JoyconAddRightZr(builder, rightZr)
def JoyconAddRightHorizontal(builder, rightHorizontal): builder.PrependInt32Slot(6, rightHorizontal, 0)
def AddRightHorizontal(builder, rightHorizontal):
    return JoyconAddRightHorizontal(builder, rightHorizontal)
def JoyconAddRightVertical(builder, rightVertical): builder.PrependInt32Slot(7, rightVertical, 0)
def AddRightVertical(builder, rightVertical):
    return JoyconAddRightVertical(builder, rightVertical)
def JoyconAddRightAccelX(builder, rightAccelX): builder.PrependInt32Slot(8, rightAccelX, 0)
def AddRightAccelX(builder, rightAccelX):
    return JoyconAddRightAccelX(builder, rightAccelX)
def JoyconAddRightAccelY(builder, rightAccelY): builder.PrependInt32Slot(9, rightAccelY, 0)
def AddRightAccelY(builder, rightAccelY):
    return JoyconAddRightAccelY(builder, rightAccelY)
def JoyconAddRightAccelZ(builder, rightAccelZ): builder.PrependInt32Slot(10, rightAccelZ, 0)
def AddRightAccelZ(builder, rightAccelZ):
    return JoyconAddRightAccelZ(builder, rightAccelZ)
def JoyconAddRightGyroX(builder, rightGyroX): builder.PrependFloat32Slot(11, rightGyroX, 0.0)
def AddRightGyroX(builder, rightGyroX):
    return JoyconAddRightGyroX(builder, rightGyroX)
def JoyconAddRightGyroY(builder, rightGyroY): builder.PrependFloat32Slot(12, rightGyroY, 0.0)
def AddRightGyroY(builder, rightGyroY):
    return JoyconAddRightGyroY(builder, rightGyroY)
def JoyconAddRightGyroZ(builder, rightGyroZ): builder.PrependFloat32Slot(13, rightGyroZ, 0.0)
def AddRightGyroZ(builder, rightGyroZ):
    return JoyconAddRightGyroZ(builder, rightGyroZ)
def JoyconAddRightBatteryCharging(builder, rightBatteryCharging): builder.PrependInt32Slot(14, rightBatteryCharging, 0)
def AddRightBatteryCharging(builder, rightBatteryCharging):
    return JoyconAddRightBatteryCharging(builder, rightBatteryCharging)
def JoyconAddRightBatteryLevel(builder, rightBatteryLevel): builder.PrependInt32Slot(15, rightBatteryLevel, 0)
def AddRightBatteryLevel(builder, rightBatteryLevel):
    return JoyconAddRightBatteryLevel(builder, rightBatteryLevel)
def JoyconAddRightHome(builder, rightHome): builder.PrependInt32Slot(16, rightHome, 0)
def AddRightHome(builder, rightHome):
    return JoyconAddRightHome(builder, rightHome)
def JoyconAddLeftDown(builder, leftDown): builder.PrependInt32Slot(17, leftDown, 0)
def AddLeftDown(builder, leftDown):
    return JoyconAddLeftDown(builder, leftDown)
def JoyconAddLeftUp(builder, leftUp): builder.PrependInt32Slot(18, leftUp, 0)
def AddLeftUp(builder, leftUp):
    return JoyconAddLeftUp(builder, leftUp)
def JoyconAddLeftRight(builder, leftRight): builder.PrependInt32Slot(19, leftRight, 0)
def AddLeftRight(builder, leftRight):
    return JoyconAddLeftRight(builder, leftRight)
def JoyconAddLeftLeft(builder, leftLeft): builder.PrependInt32Slot(20, leftLeft, 0)
def AddLeftLeft(builder, leftLeft):
    return JoyconAddLeftLeft(builder, leftLeft)
def JoyconAddLeftL(builder, leftL): builder.PrependInt32Slot(21, leftL, 0)
def AddLeftL(builder, leftL):
    return JoyconAddLeftL(builder, leftL)
def JoyconAddLeftZl(builder, leftZl): builder.PrependInt32Slot(22, leftZl, 0)
def AddLeftZl(builder, leftZl):
    return JoyconAddLeftZl(builder, leftZl)
def JoyconAddLeftHorizontal(builder, leftHorizontal): builder.PrependInt32Slot(23, leftHorizontal, 0)
def AddLeftHorizontal(builder, leftHorizontal):
    return JoyconAddLeftHorizontal(builder, leftHorizontal)
def JoyconAddLeftVertical(builder, leftVertical): builder.PrependInt32Slot(24, leftVertical, 0)
def AddLeftVertical(builder, leftVertical):
    return JoyconAddLeftVertical(builder, leftVertical)
def JoyconAddLeftAccelX(builder, leftAccelX): builder.PrependInt32Slot(25, leftAccelX, 0)
def AddLeftAccelX(builder, leftAccelX):
    return JoyconAddLeftAccelX(builder, leftAccelX)
def JoyconAddLeftAccelY(builder, leftAccelY): builder.PrependInt32Slot(26, leftAccelY, 0)
def AddLeftAccelY(builder, leftAccelY):
    return JoyconAddLeftAccelY(builder, leftAccelY)
def JoyconAddLeftAccelZ(builder, leftAccelZ): builder.PrependInt32Slot(27, leftAccelZ, 0)
def AddLeftAccelZ(builder, leftAccelZ):
    return JoyconAddLeftAccelZ(builder, leftAccelZ)
def JoyconAddLeftGyroX(builder, leftGyroX): builder.PrependFloat32Slot(28, leftGyroX, 0.0)
def AddLeftGyroX(builder, leftGyroX):
    return JoyconAddLeftGyroX(builder, leftGyroX)
def JoyconAddLeftGyroY(builder, leftGyroY): builder.PrependFloat32Slot(29, leftGyroY, 0.0)
def AddLeftGyroY(builder, leftGyroY):
    return JoyconAddLeftGyroY(builder, leftGyroY)
def JoyconAddLeftGyroZ(builder, leftGyroZ): builder.PrependFloat32Slot(30, leftGyroZ, 0.0)
def AddLeftGyroZ(builder, leftGyroZ):
    return JoyconAddLeftGyroZ(builder, leftGyroZ)
def JoyconAddLeftBatteryCharging(builder, leftBatteryCharging): builder.PrependInt32Slot(31, leftBatteryCharging, 0)
def AddLeftBatteryCharging(builder, leftBatteryCharging):
    return JoyconAddLeftBatteryCharging(builder, leftBatteryCharging)
def JoyconAddLeftBatteryLevel(builder, leftBatteryLevel): builder.PrependInt32Slot(32, leftBatteryLevel, 0)
def AddLeftBatteryLevel(builder, leftBatteryLevel):
    return JoyconAddLeftBatteryLevel(builder, leftBatteryLevel)
def JoyconEnd(builder): return builder.EndObject()
def End(builder):
    return JoyconEnd(builder)