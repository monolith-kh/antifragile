# automatically generated by the FlatBuffers compiler, do not modify

# namespace: pilot

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Players(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPlayers(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Players()
        x.Init(buf, n + offset)
        return x

    # Players
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Players
    def Players(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from fbs.pilot.Player import Player
            obj = Player()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Players
    def PlayersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Players
    def PlayersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def PlayersStart(builder): builder.StartObject(1)
def PlayersAddPlayers(builder, players): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(players), 0)
def PlayersStartPlayersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PlayersEnd(builder): return builder.EndObject()
