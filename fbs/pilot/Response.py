# automatically generated by the FlatBuffers compiler, do not modify

# namespace: pilot

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Response(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Response()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Response
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Response
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Response
    def Command(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Response
    def ErrorCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Response
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Response
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def ResponseStart(builder): builder.StartObject(5)
def Start(builder):
    return ResponseStart(builder)
def ResponseAddTimestamp(builder, timestamp): builder.PrependInt64Slot(0, timestamp, 0)
def AddTimestamp(builder, timestamp):
    return ResponseAddTimestamp(builder, timestamp)
def ResponseAddCommand(builder, command): builder.PrependInt8Slot(1, command, 0)
def AddCommand(builder, command):
    return ResponseAddCommand(builder, command)
def ResponseAddErrorCode(builder, errorCode): builder.PrependInt32Slot(2, errorCode, 0)
def AddErrorCode(builder, errorCode):
    return ResponseAddErrorCode(builder, errorCode)
def ResponseAddDataType(builder, dataType): builder.PrependUint8Slot(3, dataType, 0)
def AddDataType(builder, dataType):
    return ResponseAddDataType(builder, dataType)
def ResponseAddData(builder, data): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def AddData(builder, data):
    return ResponseAddData(builder, data)
def ResponseEnd(builder): return builder.EndObject()
def End(builder):
    return ResponseEnd(builder)